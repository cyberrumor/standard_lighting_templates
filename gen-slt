#!/usr/bin/env python3
import textwrap
from dataclasses import dataclass
from pathlib import Path
from typing import Iterable

# Docs:
# https://ck.uesp.net/wiki/Lighting_Template
# Note that Specular, Fresnel Power, and Ambient don't impact the scene at all.


# How many units until geometry is clipped out of the scene.
# Both 0 and 1 disable this kind of clipping. Disable that shit
# so the walls don't disappear and whatnot.
CLIP_DIST = 0

# Color of directional ambient lighting
DALC_MAX = 25
DALC_MIN = 10

DIRECTIONAL_COLOR = 0

# This is a light that impacts the entire cell.
# It is generally used to simulate bounced light.
# This value is used for both color and brightness.
DIRECTIONAL_FADE = 25

# This is completely unused by the game, but is used in the creation kit.
AMBIENT = 0
# This is completely unused by the game, never fully implemented by Bethesda.
SPECULAR = 0

# Color of fog.
FOG_FADE = 0

# How many units away from player camera before fog starts to show up.
# Best to set this in case disabling fog doesn't work for some reason.
FOG_NEAR = 100_000

# The distance where the fog maxes out. If your max fog power is less
# than one, the distance where you reach your maximum fog value will be
# shorter than this.
FOG_FAR = 1_000_000

# The power of the fog (between 0 and 1). The lower this value is,
# the quicker the fog will show up. This should be set to 1 so the
# values from FOG_NEAR and FOG_FAR actually get used verbatim.
FOG_POW = 1

AVAILABLE_FLAGS = [
    "ambientcolor",
    "clipdistance",
    "directionalcolor",
    "directionalfade",
    "directionalrotation",
    "fogcolor",
    "fogfar",
    "fogmax",
    "fognear",
    "fogpower",
    "lightfadedistances",
]

LIGHTING_TEMPLATE = "StandardLightingTemplates.esp|000801"
INHERIT_FLAGS = [
    # fogmax is the maximum amount the fog can impact the scene.
    # It's represented as a percent from 0 to 1. 0 disables fog.
    # We can't set this with SkyPatcher so we must inherit.
    "fogmax",
    "directionalrotation",
    "lightfadedistances",
]

# Stuff we want to set ourselves.
NO_INHERIT_FLAGS = {
    # ambientcolor itself does nothing but let you automatically set DALC via a button in the CK.
    # We have to inherit it to be able to override DALC though.
    "ambientcolor": (
        f"ambientRed={AMBIENT}:ambientGreen={AMBIENT}:ambientBlue={AMBIENT}"
        +
        f"directionalAmbientXMinRed={DALC_MIN}:directionalAmbientXMinGreen={DALC_MIN}:directionalAmbientXMinBlue={DALC_MIN}"
        +
        f"directionalAmbientXMaxRed={DALC_MAX}:directionalAmbientXMaxGreen={DALC_MAX}:directionalAmbientXMaxBlue={DALC_MAX}"
        +
        f"directionalAmbientYMinRed={DALC_MIN}:directionalAmbientYMinGreen={DALC_MIN}:directionalAmbientYMinBlue={DALC_MIN}"
        +
        f"directionalAmbientYMaxRed={DALC_MAX}:directionalAmbientYMaxGreen={DALC_MAX}:directionalAmbientYMaxBlue={DALC_MAX}"
        +
        f"directionalAmbientZMinRed={DALC_MIN}:directionalAmbientZMinGreen={DALC_MIN}:directionalAmbientZMinBlue={DALC_MIN}"
        +
        f"directionalAmbientZMaxRed={DALC_MAX}:directionalAmbientZMaxGreen={DALC_MAX}:directionalAmbientZMaxBlue={DALC_MAX}"
        +
        f"directionalAmbientSpecularRed={SPECULAR}:directionalAmbientSpecularGreen={SPECULAR}:directionalAmbientSpecularBlue={SPECULAR}"
    ),
    "clipdistance": f"clipDist={CLIP_DIST}",
    "directionalcolor": f"directionalRed={DIRECTIONAL_COLOR}:directionalGreen={DIRECTIONAL_COLOR}:directionalBlue={DIRECTIONAL_COLOR}",
    "directionalfade": f"directionalFade={DIRECTIONAL_FADE}",
    "fogcolor": f"fogColorNearRed={FOG_FADE}:fogColorNearGreen={FOG_FADE}:fogColorNearBlue={FOG_FADE}",
    "fogfar": f"fogFar={FOG_FAR}",
    "fognear": f"fogNear={FOG_NEAR}",
    "fogpower": f"fogPower={FOG_POW}",
}

# Make sure we're specifying every available flag.
for flag in AVAILABLE_FLAGS:
    assert (
        flag in INHERIT_FLAGS or flag in NO_INHERIT_FLAGS
    ), f"{flag} was not specified to be inherited or overridden"

# Make sure we're not doubling up on flags.
for flag in INHERIT_FLAGS:
    assert (
        flag not in NO_INHERIT_FLAGS
    ), f"{flag} was in INHERIT_FLAGS and NO_INHERIT_FLAGS. You can only use one or the other."


SUPPORTED_PLUGINS = [file.name.rstrip("_Cells.csv") for file in Path("Cells").iterdir()]

@dataclass(kw_only=True)
class Cell:
    plugin: str # Skyrim.esm
    name: str   # whiterundragonsreach
    id: str     # 000165A3

def get_cells() -> Iterable[Cell]:
    """
    Get the Cells.csv from "Export interior cell names" from xEdit for each plugin one by one,
    rename the files <my_plugin_file_stem>.<my_plugin_file_extension>_Cells.csv and put them
    in the Cells folder in this repo. Run this script from the base directory of this repo.

    standard_lighting_templates
    ├── Cells
    │   ├── ccBGSSSE001-Fish.esm_Cells.csv
    │   ├── ccBGSSSE025-AdvDSGS.esm_Cells.csv
    │   ├── ccQDRSSE001-SurvivalMode.esl_Cells.csv
    │   ├── Dawnguard.esm_Cells.csv
    │   ├── Dragonborn.esm_Cells.csv
    │   ├── HearthFires.esm_Cells.csv
    │   ├── Skyrim.esm_Cells.csv
    │   └── Update.esm_Cells.csv
    └── gen-slt

    """
    for file in Path("Cells").iterdir():
        contents = ""
        with open(file, "r") as f:
            contents = f.read()

        lines = contents.split("\n")

        for line in lines:
            if not line:
                continue
            if ";" not in line:
                continue

            entries = line.split(";")

            cell = Cell(
                plugin=file.name.split("_")[0],
                name=entries[3],
                id=entries[0].replace("[", "").replace("]", ""),
            )

            if cell.id == "FormID":
                continue

            if cell.name == "EditorID":
                continue

            if any(
                i in cell.name.lower()
                for i in
                [
                    "marker",
                    "test",
                    "holding",
                    "delete",
                    "navmeshgencell",
                    "qasmoke",
                    "utilitycell",
                ]
            ):
                continue

            yield cell

def get_contents_for(plugin: str, cells: Iterable[Cell]) -> str:
    """
    Given a plugin name like Skyrim.esm and an iterable over cells,
    return a string representing the contents of the config file
    for that particular plugin. This config excludes cells that are
    handled by plugins other than the given one.
    """
    template = textwrap.dedent(
        f"""\
        ; EditorID
        filterByCells=EditorID
        :lightingTemplate=StandardLightingTemplates.esp|00801
        :setInheritanceFlags={", ".join(INHERIT_FLAGS)}
        :removeInheritanceFlags={", ".join(NO_INHERIT_FLAGS)}
        """
    )

    for flag, value in NO_INHERIT_FLAGS.items():
        template += f":{value}\n"

    template += "\n"

    result = ""
    for cell in cells:
        if cell.plugin != plugin:
            continue

        config_string = template.replace("EditorID", cell.name)

        formatted_config_string = config_string.replace(
            "\n:", ":"
        ).replace(
            ",\n", ", "
        ).replace(
            "=\n", "="
        )

        result += formatted_config_string

    return result.strip()


def write_conf(plugin: str, contents: str) -> None:
    """
    Given a plugin name and the config contents for that plugin,
    find and write that plugin's conf file in-place.
    """
    home = Path.home()
    parent_path = home / ".local/share/ammo/Skyrim Special Edition/mods/standard_lighting_templates/Data/SKSE/Plugins/SkyPatcher/cell/standard_lighting_templates/"
    parent_path.mkdir(parents=True, exist_ok=True)

    with open(parent_path / f"{plugin}.ini", "w") as f:
        print(contents, file=f, flush=True)


if __name__ == "__main__":
    cells = sorted(
        get_cells(),
        key=lambda cell: cell.name
    )

    for plugin in SUPPORTED_PLUGINS:
        # The "Export interior cells" script in xEdit exports cells touched by a plugin,
        # even if that plugin didn't actually _create_ the cell. If a config file uses
        # filterByCells=<plugin>|<cell>
        # where that cell was created by a different plugin than the one specified, then
        # SkyPatcher will ctd after the main menu background shows but before the menu
        # is possible to interact with.
        # Therefore, use
        # filterByCells=<EditorID>
        # instead.
        plugin_cells = [cell for cell in cells if cell.plugin == plugin]
        contents = get_contents_for(plugin, plugin_cells)
        if not contents.strip():
            continue
        write_conf(plugin, contents)

