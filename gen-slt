#!/usr/bin/env python3
import textwrap
from dataclasses import dataclass
from pathlib import Path
from typing import Iterable

# Docs:
# https://ck.uesp.net/wiki/Lighting_Template
# Note that Specular, Fresnel Power, and Ambient don't impact the scene at all.

# Cells Patcher 5.0.2 doens't support setting the following, so we need to
# inherit them from a template:
# - fogmax
# - directionalrotation
# - lightfadedistances
LIGHTING_TEMPLATE = "StandardLightingTemplates.esp|000801"

# Color of directional ambient lighting
DALC_FADE = 0

# Color of fog (for r, g, and b)
FOG_FADE = 0

# How many units away from player camera before fog starts to show up.
FOG_NEAR = 0

# The distance where the fog maxes out. If your max fog power is less
# than one, the distance where you reach your maximum fog value will be
# shorter than this.
FOG_FAR = 1_000_000

# The power of the fog (between 0 and 1). The lower this value is,
# the quicker the fog will show up.
FOG_POW = 1

# The maximum amount the fog color can impact the scene. 1 means it
# can go to 100% of the fog color. This is usually set around .7 in
# vanilla to show fog while preventing scenes from going to a flat color.
# FOG_MAX = 0

# How many units until geometry is clipped out of the scene.
CLIP_DIST = 1_000_000


SUPPORTED_PLUGINS = [file.name.rstrip("_Cells.csv") for file in Path("Cells").iterdir()]

@dataclass(kw_only=True)
class Cell:
    plugin: str # Skyrim.esm
    name: str   # whiterundragonsreach
    id: str     # 000165A3

def get_cells() -> Iterable[Cell]:
    """
    Get the Cells.csv from "Export interior cell names" from xEdit for each plugin one by one,
    rename the files <my_plugin_file_stem>.<my_plugin_file_extension>_Cells.csv and put them
    in the Cells folder in this repo. Run this script from the base directory of this repo.

    standard_lighting_templates
    ├── Cells
    │   ├── ccBGSSSE001-Fish.esm_Cells.csv
    │   ├── ccBGSSSE025-AdvDSGS.esm_Cells.csv
    │   ├── ccQDRSSE001-SurvivalMode.esl_Cells.csv
    │   ├── Dawnguard.esm_Cells.csv
    │   ├── Dragonborn.esm_Cells.csv
    │   ├── HearthFires.esm_Cells.csv
    │   ├── Skyrim.esm_Cells.csv
    │   └── Update.esm_Cells.csv
    └── gen-slt

    """
    for file in Path("Cells").iterdir():
        contents = ""
        with open(file, "r") as f:
            contents = f.read()

        lines = contents.split("\n")

        for line in lines:
            if not line:
                continue
            if ";" not in line:
                continue

            entries = line.split(";")

            cell = Cell(
                plugin=file.name.split("_")[0],
                name=entries[3],
                id=entries[0].replace("[", "").replace("]", ""),
            )

            if cell.id == "FormID":
                continue

            if cell.name == "EditorID":
                continue

            if any(
                i in cell.name.lower()
                for i in
                [
                    "marker",
                    "test",
                    "holding",
                    "delete",
                    "navmeshgencell",
                    "qasmoke",
                    "utilitycell",
                ]
            ):
                continue

            yield cell

def get_contents_for(plugin: str, cells: Iterable[Cell]) -> str:
    """
    Given a plugin name like Skyrim.esm and an iterable over cells,
    return a string representing the contents of the config file
    for that particular plugin. This config excludes cells that are
    handled by plugins other than the given one.
    """
    template = textwrap.dedent(
        f"""\
        ; EditorID
        filterByCells=EditorID
        :lightingTemplate={LIGHTING_TEMPLATE}
        :setInheritanceFlags=
        directionalrotation,
        fogmax,
        lightfadedistances
        :removeInheritanceFlags=
        clipdistance,
        directionalcolor,
        directionalfade,
        fogcolor,
        fogfar,
        fognear,
        fogpower
        :clipDist={CLIP_DIST}
        :fogFar={FOG_FAR}
        :fogNear={FOG_NEAR}
        :fogPower={FOG_POW}
        :directionalAmbientXMaxBlue={DALC_FADE}
        :directionalAmbientXMaxGreen={DALC_FADE}
        :directionalAmbientXMaxRed={DALC_FADE}
        :directionalAmbientXMinBlue={DALC_FADE}
        :directionalAmbientXMinGreen={DALC_FADE}
        :directionalAmbientXMinRed={DALC_FADE}
        :directionalAmbientYMaxBlue={DALC_FADE}
        :directionalAmbientYMaxGreen={DALC_FADE}
        :directionalAmbientYMaxRed={DALC_FADE}
        :directionalAmbientYMinBlue={DALC_FADE}
        :directionalAmbientYMinGreen={DALC_FADE}
        :directionalAmbientYMinRed={DALC_FADE}
        :directionalAmbientZMaxBlue={DALC_FADE}
        :directionalAmbientZMaxGreen={DALC_FADE}
        :directionalAmbientZMaxRed={DALC_FADE}
        :directionalAmbientZMinBlue={DALC_FADE}
        :directionalAmbientZMinGreen={DALC_FADE}
        :directionalAmbientZMinRed={DALC_FADE}
        :directionalBlue={DALC_FADE}
        :directionalGreen={DALC_FADE}
        :directionalRed={DALC_FADE}
        :fogColorNearBlue={FOG_FADE}
        :fogColorNearGreen={FOG_FADE}
        :fogColorNearRed={FOG_FADE}

        """
    )
    result = ""
    for cell in cells:
        if cell.plugin != plugin:
            continue

        config_string = template.replace("EditorID", cell.name)

        formatted_config_string = config_string.replace(
            "\n:", ":"
        ).replace(
            ",\n", ","
        ).replace(
            "=\n", "="
        )

        result += formatted_config_string

    return result.strip()


def write_conf(plugin: str, contents: str) -> None:
    """
    Given a plugin name and the config contents for that plugin,
    find and write that plugin's conf file in-place.
    """
    home = Path.home()
    parent_path = home / ".local/share/ammo/Skyrim Special Edition/mods/standard_lighting_templates/Data/SKSE/Plugins/SkyPatcher/cell/standard_lighting_templates/"
    parent_path.mkdir(parents=True, exist_ok=True)

    with open(parent_path / f"{plugin}.ini", "w") as f:
        print(contents, file=f, flush=True)


if __name__ == "__main__":
    cells = sorted(
        get_cells(),
        key=lambda cell: cell.name
    )

    for plugin in SUPPORTED_PLUGINS:
        # The "Export interior cells" script in xEdit exports cells touched by a plugin,
        # even if that plugin didn't actually _create_ the cell. If a config file uses
        # filterByCells=<plugin>|<cell>
        # where that cell was created by a different plugin than the one specified, then
        # SkyPatcher will ctd after the main menu background shows but before the menu
        # is possible to interact with.
        # Therefore, use
        # filterByCells=<EditorID>
        # instead.
        plugin_cells = [cell for cell in cells if cell.plugin == plugin]
        contents = get_contents_for(plugin, plugin_cells)
        if not contents.strip():
            continue
        write_conf(plugin, contents)

